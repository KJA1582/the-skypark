using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Windows;
using TSP_Transponder.Models.API;
using TSP_Transponder.Models.Connectors;
using TSP_Transponder.Models.Aircraft;
using static TSP_Transponder.App;
using static TSP_Transponder.Models.API.APIBase;
using static TSP_Transponder.Models.Connectors.SimConnection;
using static TSP_Transponder.Models.SimLibrary;
using static TSP_Transponder.Models.Airports.AirportsLib;
using System.IO;
using System.Globalization;
using TSP_Transponder.Models.Airports;
using System.Collections;
using TSP_Transponder.Utilities;
using static TSP_Transponder.Attributes.EnumAttr;

namespace TSP_Transponder.Models.EventBus
{
    public class EventManager
    {
        public static event EventHandler EventBus;

        private static object Lock = new object();
        private static bool Restored = false;
        private static string PersistPath = Path.Combine(DocumentsDirectory, "0242ac120002.dat");

        private static Dictionary<string, int> VisitedICAOs = new Dictionary<string, int>();

        internal static List<EventsSession> Sessions = new List<EventsSession>();
        internal static EventsSession Active = new EventsSession(ActiveSim);
        internal static Airport NearestAirport = null;

        internal static List<TemporalData> TemporalBuffer10s = new List<TemporalData>();
        private static readonly int MaxTemporalBuffer10s = 10000;
        internal static List<TemporalData> TemporalBuffer3s = new List<TemporalData>();
        private static readonly int MaxTemporalBuffer3s = 3000;

        internal static long LastLoop = 0;
        internal static float Flux60 = 1000 / 30;
        private static float Flux60Last = 0;
        private static TemporalData Flux60LastData = new TemporalData();
        internal static float Flux2 = 1000 / 2f;
        private static float Flux2Last = 0;
        private static TemporalData Flux2LastData = new TemporalData();
        internal static float Flux1 = 1000 / 1;
        private static float Flux1Last = 0;
        private static TemporalData Flux1LastData = new TemporalData();
        internal static float Flux5s = 3000;
        private static float Flux5sLast = 0;
        private static TemporalData Flux5sLastData = new TemporalData();
        internal static float FluxVeryLong = 60000;
        private static float FluxVeryLongLast = 0;
        
        internal static void Ingest(TemporalData _TemporalNewBuffer, EventsSession _ActiveBlog)
        {
            //if(_ActiveBlog.Aircraft == null || _TemporalNewBuffer.IS_POSITION_FREEZE)
            //{
            //    return;
            //}
            try
            {
                #region Temporal References
                LastLoop = App.Timer.ElapsedMilliseconds;
                TemporalData _TemporalTracked = null;
                TemporalData _TemporalLast = TemporalBuffer3s.LastOrDefault();
                TemporalData _GetLiveTemporal()
                {
                    if (_TemporalTracked == null)
                    {
                        _TemporalTracked = _TemporalNewBuffer.Copy();
                        return _TemporalTracked;
                    }
                    else
                    {
                        return _TemporalTracked;
                    }
                }
                bool HasTemporal = _TemporalNewBuffer != null && _TemporalLast != null && _ActiveBlog.Aircraft != null && _TemporalNewBuffer.ABS_TIME != _TemporalLast.ABS_TIME;
                #endregion

                if (HasTemporal)
                {
                    _ActiveBlog.Compute_Aircraft.Compute(LastLoop, _TemporalLast, _TemporalNewBuffer, _ActiveBlog);
                    _ActiveBlog.Compute_Touchdown.Compute(LastLoop, _TemporalLast, _TemporalNewBuffer, _ActiveBlog);
                    _ActiveBlog.Compute_Integrity.Compute(LastLoop, _TemporalLast, _TemporalNewBuffer, _ActiveBlog);
                    _ActiveBlog.Compute_GForces.Compute(LastLoop, _TemporalLast, _TemporalNewBuffer, _ActiveBlog);
                }

                #region 60Hz Process
                if (Flux60Last + Flux60 < LastLoop)
                {
                    Flux60Last = LastLoop;

                    if (HasTemporal)
                    {
                        Flux60LastData = _GetLiveTemporal();
                    }
                }
                #endregion

                #region 2Hz Process
                if (Flux2Last + Flux2 < LastLoop)
                {
                    Flux2Last = LastLoop;
                    Flux2LastData = _GetLiveTemporal();

                    _ActiveBlog.UpdateMeta(_TemporalNewBuffer);
                    lock (APIBase.ClientCollection.ConnectedClients)
                    {
                        if (APIBase.ClientCollection.ConnectedClients.FindAll(x => x.Type == ClientType.Skypad).Count > 0)
                        {
                            _ActiveBlog.SendMetaUpdate();
                        }
                    }
                }
                #endregion

                #region 1Hz Process
                if (Flux1Last + Flux1 < LastLoop)
                {
                    Flux1Last = LastLoop;
                    Adventures.AdventuresBase.Process(Flux1LastData, _TemporalNewBuffer);

                    if (HasTemporal)
                    {
                        _ActiveBlog.Compute_Autopilot.Compute(LastLoop, Flux1LastData, _TemporalNewBuffer, _ActiveBlog);
                        _ActiveBlog.Compute_Taxi.Compute(LastLoop, Flux1LastData, _TemporalNewBuffer, _ActiveBlog);
                        _ActiveBlog.Compute_ScreenCapture.Compute(LastLoop, Flux1LastData, _TemporalNewBuffer, _ActiveBlog);
                        _ActiveBlog.Compute_AircraftCrash.Compute(LastLoop, Flux1LastData, _TemporalNewBuffer, _ActiveBlog);

                        Flux1LastData = _GetLiveTemporal();
                    }

                }
                #endregion

                #region 5Sec Process
                if (Flux5sLast + Flux5s < LastLoop)
                {
                    Flux5sLast = LastLoop;

                    if (HasTemporal)
                    {
                        _ActiveBlog.Compute_Payload.Compute(LastLoop, Flux5sLastData, _TemporalNewBuffer, _ActiveBlog);
                        _ActiveBlog.Compute_Cruise.Compute(LastLoop, Flux5sLastData, _TemporalNewBuffer, _ActiveBlog);
                        _ActiveBlog.Compute_Position.Compute(LastLoop, Flux5sLastData, _TemporalNewBuffer, _ActiveBlog);
                        _ActiveBlog.Compute_Engines.Compute(LastLoop, Flux5sLastData, _TemporalNewBuffer, _ActiveBlog);
                        _ActiveBlog.Compute_Weather.Compute(LastLoop, Flux5sLastData, _TemporalNewBuffer, _ActiveBlog);
                        _ActiveBlog.Compute_Fuel.Compute(LastLoop, Flux5sLastData, _TemporalNewBuffer, _ActiveBlog);
                        _ActiveBlog.Compute_TerrainAvoidance.Compute(LastLoop, Flux1LastData, _TemporalNewBuffer, _ActiveBlog);
                    }

                    //API.ClientCollection.SendMessage(App.JSSerializer.Serialize(new Dictionary<string, dynamic>()
                    //{
                    //    {
                    //        "photo",
                    //        new Dictionary<string, dynamic>()
                    //        {
                    //            {"Base64", ""},
                    //            //{ "URL", ImagesHost + "/blogs/images/" + res["filename"] + "?guid=" + UserData.Get("token") + "&is_thumb=1"}
                    //        }
                    //    },
                    //}), ClientType.Overlay);


                    Flux5sLastData = _GetLiveTemporal();
                    RichPresence.Update();
                }
                #endregion

                #region 60Sec Process
                if (FluxVeryLongLast + FluxVeryLong < LastLoop)
                {
                    FluxVeryLongLast = LastLoop;

                    List<KeyValuePair<double, Airport>> NearestAirports = SimList[0].AirportsLib.GetAirportByRange(_TemporalNewBuffer.PLANE_LOCATION, 50);
                    if (NearestAirports.Count > 0)
                    {
                        NearestAirport = NearestAirports[0].Value;
                    }
                    else
                    {
                        NearestAirport = null;
                    }

                    _ActiveBlog.IsOnSatLink = GetVirtualSignalStrength(_TemporalNewBuffer);
                }
                #endregion

                #region Add Temporal Buffer 10s
                lock (TemporalBuffer10s)
                {
                    if (TemporalBuffer10s.Count > 2)
                    {
                        TemporalData TD = TemporalBuffer10s.First();
                        if (TD != null)
                        {
                            while (_TemporalLast.APP_RUNTIME - TemporalBuffer10s.First().APP_RUNTIME > MaxTemporalBuffer10s)
                            {
                                TemporalBuffer10s.RemoveAt(0);
                            }
                        }
                    }

                    if (_TemporalLast != null)
                    {
                        if (_TemporalNewBuffer.ABS_TIME != _TemporalLast.ABS_TIME)
                        {
                            TemporalBuffer10s.Add(_GetLiveTemporal());
                        }
                    }
                    else
                    {
                        TemporalBuffer10s.Add(_GetLiveTemporal());
                    }
                }
                #endregion

                #region Add Temporal Buffer 3s
                lock (TemporalBuffer3s)
                {
                    if (TemporalBuffer3s.Count > 2)
                    {
                        TemporalData TD = TemporalBuffer3s.First();
                        if (TD != null)
                        {
                            while (_TemporalLast.APP_RUNTIME - TemporalBuffer3s.First().APP_RUNTIME > MaxTemporalBuffer3s)
                            {
                                TemporalBuffer3s.RemoveAt(0);
                            }
                        }
                    }

                    if (_TemporalLast != null)
                    {
                        if (_TemporalNewBuffer.ABS_TIME != _TemporalLast.ABS_TIME)
                        {
                            TemporalBuffer3s.Add(_GetLiveTemporal());
                        }
                    }
                    else
                    {
                        TemporalBuffer3s.Add(_GetLiveTemporal());
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                Console.WriteLine("Failed to ingest Skyblog: " + ex.Message + " - " + ex.StackTrace);
            }
        }
        
        public static bool GetVirtualSignalStrength(TemporalData _TemporalNewBuffer)
        {
            bool IsSatcom = true;
            
            if (Utils.IsPointInPoly(new List<GeoLoc>()
            {
                new GeoLoc(-164.9900457,53.6517984),
                new GeoLoc(-154.7947332,55.3859733),
                new GeoLoc(-148.7302801,59.361753),
                new GeoLoc(-139.2380926,59.0015333),
                new GeoLoc(-125.087702,37.2399463),
                new GeoLoc(-112.0798895,21.7094895),
                new GeoLoc(-94.0233107,10.074983),
                new GeoLoc(-92.4070661,-1.1766999),
                new GeoLoc(-83.8377301,-4.9499107),
                new GeoLoc(-72.1043317,-21.2393433),
                new GeoLoc(-74.4773786,-34.0445885),
                new GeoLoc(-77.8172223,-50.4513021),
                new GeoLoc(-74.3894879,-55.2735667),
                new GeoLoc(-66.1277692,-56.8436449),
                new GeoLoc(-55.3172223,-51.8297581),
                new GeoLoc(-63.2273786,-47.2129518),
                new GeoLoc(-29.5652692,-8.3975319),
                new GeoLoc(-55.3789265,11.3415009),
                new GeoLoc(-61.8828328,19.9644377),
                new GeoLoc(-71.5947469,23.9173464),
                new GeoLoc(-72.1590972,39.2060217),
                new GeoLoc(-51.0722859,46.3100355),
                new GeoLoc(-54.7428653,52.8019722),
                new GeoLoc(-79.4621035,49.737838),
                new GeoLoc(-121.2101504,59.2764411),
                new GeoLoc(-146.3468692,65.0066728),
                new GeoLoc(-166.1222598,57.4324211),
                new GeoLoc(-164.9900457,53.6517984),
            }, _TemporalNewBuffer.PLANE_LOCATION))
            {
                IsSatcom = false;
            };
            
            if (Utils.IsPointInPoly(new List<GeoLoc>()
            {
                new GeoLoc(-19.0553196,22.5417991),
                new GeoLoc(-19.3189915,12.9283463),
                new GeoLoc(-8.5084446,1.4377568),
                new GeoLoc(5.3782741,1.3498922),
                new GeoLoc(14.9583522,-37.2750883),
                new GeoLoc(48.7962429,-25.6922106),
                new GeoLoc(57.4095241,17.1710395),
                new GeoLoc(64.8802272,23.1088524),
                new GeoLoc(79.0306179,3.7204467),
                new GeoLoc(94.6751491,1.525618),
                new GeoLoc(104.3431179,-9.5912004),
                new GeoLoc(118.6692897,-14.6592563),
                new GeoLoc(109.1771022,-24.6581848),
                new GeoLoc(113.5716335,-36.4311693),
                new GeoLoc(148.1126491,-45.4995589),
                new GeoLoc(175.8860867,-48.6119823),
                new GeoLoc(178.8242692,-37.8749144),
                new GeoLoc(164.1576042,-3.5478685),
                new GeoLoc(133.5716667,4.5310693),
                new GeoLoc(127.2435417,25.4517919),
                new GeoLoc(142.3083409,33.1284772),
                new GeoLoc(162.3913487,51.5566757),
                new GeoLoc(119.3249425,58.7625813),
                new GeoLoc(53.582755,62.5883527),
                new GeoLoc(26.6882237,71.7705516),
                new GeoLoc(-7.5451747,59.1253029),
                new GeoLoc(-13.9172451,52.0728461),
                new GeoLoc(-12.614303,44.3190342),
                new GeoLoc(-33.3039199,39.5571006),
                new GeoLoc(-19.0553196,22.5417991),
            }, _TemporalNewBuffer.PLANE_LOCATION))
            {
                IsSatcom = false;
            };
            
            if (Utils.IsPointInPoly(new List<GeoLoc>()
            {
                new GeoLoc(-27.9201209,65.4430766),
                new GeoLoc(-19.3068397,61.7558326),
                new GeoLoc(-9.9464882,65.5887779),
                new GeoLoc(-19.2189491,68.4503796),
                new GeoLoc(-27.9201209,65.4430766),
            }, _TemporalNewBuffer.PLANE_LOCATION))
            {
                IsSatcom = false;
            };
            
            if (Utils.IsPointInPoly(new List<GeoLoc>()
            {
                new GeoLoc(-162.3672926,21.5448183),
                new GeoLoc(-155.5337965,16.5832971),
                new GeoLoc(-151.7984449,19.9730984),
                new GeoLoc(-158.9835035,24.3568628),
                new GeoLoc(-162.3672926,21.5448183),
            }, _TemporalNewBuffer.PLANE_LOCATION))
            {
                IsSatcom = false;
            };

            return IsSatcom;
        }
        
        public static void Command(SocketClient Socket, string[] StructSplit, Dictionary<string, dynamic> structure)
        {
            Dictionary<string, dynamic> payload_struct = App.JSSerializer.Deserialize<Dictionary<string, dynamic>>(structure["payload"]);
            switch (StructSplit[1])
            {
                case "new":
                    {
                        ResetSession();
                        break;
                    }
                case "get":
                    {
                        EventsSession bl = Sessions.Find(x => x.ID == payload_struct["ID"]);
                        if(bl != null)
                        {
                            Socket.SendMessage("eventbus:get", App.JSSerializer.Serialize(new Dictionary<string, dynamic>()
                            {
                                { "Meta", bl.ToSummarized() },
                                { "Events", bl.ToListing(0) },
                            }), (Dictionary<string, dynamic>)structure["meta"]);
                        }
                        break;
                    }
            }
        }
        
        public static void VisitAirport(string ICAO)
        {
            if (VisitedICAOs.ContainsKey(ICAO))
            {
                VisitedICAOs[ICAO] += 1;
            }
            else
            {
                VisitedICAOs.Add(ICAO, 1);
            }
            ExportPersistence();
            
        }

        public static int CountAirportVisit(string ICAO)
        {
            if (VisitedICAOs.ContainsKey(ICAO))
            {
                return VisitedICAOs[ICAO];
            }
            else
            {
                return 0;
            }
        }

        internal static void OnEventBus(BusEventArgs e)
        {
            EventHandler handler = EventBus;
            handler?.Invoke(null, e);
        }
        
        public static void ReadSession(long From)
        {
            DateTime FromDate = new DateTime(From);
            int Month = FromDate.Month;
            int Year = FromDate.Year;
            string BasePath = Path.Combine(DocumentsDirectory, "EventBus");

            if (Directory.Exists(BasePath))
            {
                foreach (string YearsDir in Directory.GetDirectories(BasePath))
                {
                    try
                    {
                        DirectoryInfo YearsDirsInfo = new DirectoryInfo(YearsDir);
                        if (Convert.ToInt32(YearsDirsInfo.Name) >= Year)
                        {
                            foreach (string MonthsDir in Directory.GetDirectories(YearsDir))
                            {
                                try
                                {
                                    DirectoryInfo MonthsDirsInfo = new DirectoryInfo(MonthsDir);
                                    if (Convert.ToInt32(MonthsDirsInfo.Name) > Month)
                                    {
                                        foreach (string SessionDirs in Directory.GetDirectories(MonthsDir))
                                        {
                                            try
                                            {
                                                string DatFile = Directory.GetFiles(SessionDirs, "*.dat")[0];

                                                using (StreamReader r = new StreamReader(new FileStream(DatFile, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
                                                {
                                                    var json = r.ReadToEnd();
                                                    Dictionary<string, dynamic> Persisted = JSSerializer.Deserialize<Dictionary<string, dynamic>>(json);

                                                    lock (Sessions)
                                                    {
                                                        if (Sessions.Find(x => x.ID == (int)Persisted["ID"]) == null)
                                                        {
                                                            Sessions.Add(new EventsSession(Persisted));
                                                        }
                                                    }
                                                }
                                                
                                            }
                                            catch (Exception ex)
                                            {
                                                Console.WriteLine("Failed to read Blog folder " + SessionDirs + " / " + ex.Message);
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine("Failed to read Blog folder " + MonthsDir + " / " + ex.Message);
                                }

                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Failed to read Blog folder " + YearsDir + " / " + ex.Message);
                    }

                }
            }

        }

        internal static void ResetSession()
        {
            Active.Close();
            Active = new EventsSession(ActiveSim);
        }

        public static void RestorePersistence()
        {
            lock (Lock)
            {
                //try
                //{
                //    string ImportPath = PersistPath;
                //
                //    if (File.Exists(PersistPath + "_bkp"))
                //    {
                //        ImportPath = PersistPath + "_bkp";
                //    }
                //
                //    using (StreamReader r = new StreamReader(new FileStream(ImportPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
                //    {
                //        var json = r.ReadToEnd();
                //        List<Dictionary<string, dynamic>> Persisted = JSSerializer.Deserialize<List<Dictionary<string, dynamic>>>(json);
                //
                //
                //    }
                //}
                //catch
                //{
                //    Console.WriteLine("Failed to export Skyblog Persistence");
                //}

                Restored = true;
            }
        }

        public static void ExportPersistence()
        {
            lock (Lock)
            {
                if (!Restored)
                {
                    return;
                }

                try
                {
                    Console.WriteLine("Exporting Skyblog Persistence");

                    if (File.Exists(PersistPath + "_bkp"))
                    {
                        File.Delete(PersistPath + "_bkp");
                    }

                    if (File.Exists(PersistPath))
                    {
                        File.Copy(PersistPath, PersistPath + "_bkp");
                    }

                    using (StreamWriter writer = new StreamWriter(PersistPath, false))
                    {
                        writer.WriteLine(JSSerializer.Serialize(GetExport()));
                    }

                    File.Delete(PersistPath + "_bkp");
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Failed to save Bank Persistence: " + ex.Message + Environment.NewLine + ex.StackTrace);
                }
            }

            Console.WriteLine("Done Exporting Skyblog Persistence");

        }

        
        public static Dictionary<string, dynamic> GetExport()
        {
            Dictionary<string, dynamic> rs = new Dictionary<string, dynamic>()
            {
                { "VisitedICAOs", VisitedICAOs },
            };

            return rs;
        }

        private static List<Dictionary<string, dynamic>> ToSummarized()
        {
            List<Dictionary<string, dynamic>> rt = new List<Dictionary<string, dynamic>>();
            foreach(EventsSession bl in Sessions)
            {
                rt.Add(bl.ToSummarized());
            }
            return rt;
        }

        private static List<List<Dictionary<string, dynamic>>> ToListing()
        {
            List<List<Dictionary<string, dynamic>>> rt = new List<List<Dictionary<string, dynamic>>>();
            foreach (EventsSession bl in Sessions)
            {
                rt.Add(bl.ToListing(0));
            }
            return rt;
        }


        internal class BusEventArgs : EventArgs
        {
            public Event Ev { get; set; }
        }


        public class EventsSession
        {
            internal Simulator Sim = null;
            internal uint VMajor = 0;
            internal uint VMinor = 0;
            internal long ID = -1;
            internal AircraftInstance Aircraft = null;
            internal string AircraftName = "";
            internal bool Started = false;
            internal DateTime? StartTime = null;
            internal P42StopWatch Timer = new P42StopWatch();
            internal bool HasTakeoff = false;
            internal bool HasLanding = false;
            internal bool IsValid
            {
                get
                {
                    if (Timer.ElapsedMilliseconds > 0 && ((HasTakeoff && HasLanding) || (HasTakeoff && Timer.ElapsedMilliseconds > 600000) || PreviousSessionCrashed)) // > 10 minutes
                    {
                        return true;
                    }

                    return false;
                }
            }
            internal double LastTransmission = 0;
            internal double LastRemoteTransmission = 0;
            internal bool IsOnSatLink = false;
            internal bool PhotoSending = false;
            internal string CoverPhoto = "";
            internal int PhotoCount = 0;
            internal int PhotoMaxCount = 12;
            internal DateTime Time = DateTime.Now;
            internal DateTime TimeZulu = DateTime.UtcNow;
            internal double SimTimeOffset = 0;
            internal DateTime SimTimeZulu = DateTime.Now;
            
            internal List<Event> Events = new List<Event>();
            internal Dictionary<EventType, List<Event>> EventDic = new Dictionary<EventType, List<Event>>();
            internal List<Airport> Airports = new List<Airport>();

            private static object Lock = new object();
            private List<KeyValuePair<string, Event>> Queue = new List<KeyValuePair<string, Event>>();

            internal P42StopWatch BlockTime = new P42StopWatch();
            internal P42StopWatch AirTime = new P42StopWatch();
            internal double TravelDistance = 0;

            internal Compute_ScreenCapture Compute_ScreenCapture = new Compute_ScreenCapture();
            internal Compute_AircraftCrash Compute_AircraftCrash = new Compute_AircraftCrash();
            internal Compute_TerrainAvoidance Compute_TerrainAvoidance = new Compute_TerrainAvoidance();
            internal Compute_Autopilot Compute_Autopilot = new Compute_Autopilot();
            internal Compute_Touchdown Compute_Touchdown = new Compute_Touchdown();
            internal Compute_Aircraft Compute_Aircraft = new Compute_Aircraft();
            internal Compute_Integrity Compute_Integrity = new Compute_Integrity();
            internal Compute_Position Compute_Position = new Compute_Position();
            internal Compute_Engines Compute_Engines = new Compute_Engines();
            internal Compute_Weather Compute_Weather = new Compute_Weather();
            internal Compute_GForces Compute_GForces = new Compute_GForces();
            internal Compute_Cruise Compute_Cruise = new Compute_Cruise();
            internal Compute_Payload Compute_Payload = new Compute_Payload();
            internal Compute_Taxi Compute_Taxi = new Compute_Taxi();
            internal Compute_Fuel Compute_Fuel = new Compute_Fuel();

            public EventsSession(Simulator _sim)
            {
                if(SimConnection.Aircraft == null)
                {
                    return;
                }

                Console.WriteLine("-> New Skyblog");

                Sim = _sim;
                VMajor = ActiveSimVersionMajor;
                VMinor = ActiveSimVersionMinor;
                Aircraft = SimConnection.Aircraft;
                AircraftName = Aircraft.Name;
                ID = Utils.TimeStamp(DateTime.UtcNow);
                TemporalBuffer10s.Clear();
                Flux60LastData = new TemporalData();
                Flux1LastData = new TemporalData();
                Flux5sLastData = new TemporalData();

                if (LastTemporalData.SIM_ON_GROUND)
                {
                    //HasLanding = true;
                }
                else
                {
                    HasTakeoff = true;
                }

                Flux60Last = 0;
                Flux1Last = 0;
                Flux5sLast = 0;

                foreach (EventType ev in Enum.GetValues(typeof(EventType)).Cast<EventType>().ToList())
                {
                    EventDic.Add(ev, new List<Event>());
                }

                Sessions.Add(this);

                WorldManager.World.UpdateAircraftTiles(LastTemporalData.PLANE_LOCATION, (int)LastTemporalData.PLANE_ALT_ABOVE_GROUND, (int)LastTemporalData.SURFACE_RELATIVE_GROUND_SPEED, (int)LastTemporalData.PLANE_COURSE);

                SendMetaUpdate();
            }

            public EventsSession(Dictionary<string, dynamic> Persisted)
            {
                AircraftName = (string)Persisted["AircraftName"];
                Sim = SimList.Find(x => x.Platform == (string)Persisted["Sim"]);
                VMajor = (uint)Persisted["VMajor"];
                VMinor = (uint)Persisted["VMinor"];
                ID = (long)Persisted["ID"];
                Timer.Set((long)Persisted["Timer"]);
                BlockTime.Set((long)Persisted["BlockTime"]);
                AirTime.Set((long)Persisted["AirTime"]);
                CoverPhoto = (string)Persisted["CoverPhoto"];
                PhotoCount = (int)Persisted["PhotoCount"];
                Time = DateTime.Parse((string)Persisted["Time"], CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
                TimeZulu = DateTime.Parse((string)Persisted["TimeZulu"], CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
                SimTimeOffset = (int)Persisted["SimTimeOffset"];
                SimTimeZulu = DateTime.Parse((string)Persisted["SimTimeZulu"], CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
                TravelDistance = (float)Persisted["TravelDistance"];
                HasTakeoff = (bool)Persisted["HasTakeoff"];
                HasLanding = (bool)Persisted["HasLanding"];

                if (Persisted["StartTime"] != null)
                {
                    StartTime = DateTime.Parse((string)Persisted["StartTime"], CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
                }

                foreach (string AirportStr in (ArrayList)Persisted["Airports"])
                {
                    bool HasFailed = false;
                    if(AirportStr == "????")
                    {
                        HasFailed = true;
                    }
                    else
                    {
                        Airport FromLib = SimList[0].AirportsLib.GetByICAO(AirportStr);
                        if (FromLib != null)
                        {
                            Airports.Add(FromLib);
                        }
                        else
                        {
                            HasFailed = true;
                        }
                    }

                    if (HasFailed)
                    {
                        Airports.Add(new Airport()
                        {
                            ICAO = AirportStr,
                        });
                    }
                }

                foreach (Dictionary<string, dynamic> EventDic in (ArrayList)Persisted["Events"])
                {
                    Events.Add(new Event(this, EventDic));
                }
                
            }

            internal void Close()
            {
                if (Aircraft == null)
                {
                    return;
                }

                Console.WriteLine("--> Closing Skyblog");

                if (Started)
                {
                    Timer.Stop();

                    if (IsValid)
                    {
                        Console.WriteLine("-> Skyblog is Closed and valid");
                    }
                    else
                    {
                        Console.WriteLine("-> Skyblog is Closed and not valid (No Takeoff)");
                    }

                }
                else
                {
                    Console.WriteLine("-> Skyblog is Closed and not valid (No Movements)");
                }

                if (IsValid)
                {
                    AddLiveDataToQueue();
                }
                
                if (PreviousSessionCrashed)
                {
                    AddEvent(new Event(this)
                    {
                        Type = EventType.SimCrash,
                        Timecode = Convert.ToInt32(Timer.ElapsedMilliseconds),
                        Params = new Dictionary<string, dynamic>()
                        {
                            { "Lon", Math.Round(LastTemporalData.PLANE_LOCATION.Lon, 6) },
                            { "Lat", Math.Round(LastTemporalData.PLANE_LOCATION.Lat, 6) },
                            { "Alt", Math.Round(LastTemporalData.PLANE_ALTITUDE) },
                        }
                    }, false);
                }

                AddEvent(new Event(this)
                {
                    Type = EventType.Close,
                    Timecode = Convert.ToInt32(Timer.ElapsedMilliseconds),
                    Params = new Dictionary<string, dynamic>()
                }, true);

                Started = false;

                SendMetaUpdate();

                if (!IsValid)
                {
                    Delete();
                }
                else
                {
                    ExportPersistence();
                }

            }

            internal void Start()
            {
                if (!Started && Aircraft != null && BlockTime.ElapsedMilliseconds == 0)
                {
                    Console.WriteLine("--> Starting Skyblog");
                    Timer.Start();

                    if(StartTime == null)
                    {
                        StartTime = DateTime.UtcNow;
                    }

                    Airport nearAirport = Sim.AirportsLib.GetAirportByRange(LastTemporalData.PLANE_LOCATION, 10)[0].Value;
                    if (nearAirport == null)
                    {
                        nearAirport = new Airport();
                    }

                    if (Airports.Find(x => x.ICAO == nearAirport.ICAO) == null)
                    {
                        Airports.Add(nearAirport);
                    }

                    AddEvent(new Event(this)
                    {
                        Type = EventType.Start,
                        Timecode = Convert.ToInt32(Timer.ElapsedMilliseconds),
                        Params = new Dictionary<string, dynamic>()
                        {
                            { "Aircraft", Aircraft.Name },
                            { "AirportName", nearAirport.Name },
                            { "AirportICAO", nearAirport.ICAO },
                            { "EngingCount", Aircraft.EngineCount },
                            { "Lon", Math.Round(LastTemporalData.PLANE_LOCATION.Lon, 6) },
                            { "Lat", Math.Round(LastTemporalData.PLANE_LOCATION.Lat, 6) },
                            { "Alt", Math.Round(LastTemporalData.PLANE_ALTITUDE) },
                            { "Time", Utils.TimeStamp(DateTime.Now) },
                            { "SimTimeOffset", LastTemporalData.SIM_ZULU_OFFSET },
                            { "SimTimeZulu", Utils.TimeStamp(LastTemporalData.SIM_ZULU_TIME) },
                        }
                    }, false);

                    Started = true;

                    if (LastTemporalData.SIM_ON_GROUND)
                    {
                        AirTime.Stop();
                    }
                    else if (!IsPaused && SimConnection.IsRunning)
                    {
                        AirTime.Start();
                    }
                    
                    SendMetaUpdate();
                    BroadcastEvents();
                }

            }

            internal string GetBlogDir()
            {
                DateTime ST = ((DateTime)StartTime);

                string PathName = "";
                int i = 0;
                lock(Airports)
                {
                    foreach (Airport Airport in Airports)
                    {
                        string icao = Airport.ICAO.Replace("?", "-");
                        if (i < Airports.Count - 1)
                        {
                            PathName += icao + "-";
                        }
                        else
                        {
                            PathName += icao;
                        }
                        i++;
                    }
                }

                return Path.Combine(DocumentsDirectory, "EventBus", ST.Year.ToString(), ST.Month.ToString(), PathName);
            }

            internal void Delete()
            {
                Console.WriteLine("-> Deleting Skyblog");

                lock (Sessions)
                {
                    Sessions.Remove(this);
                }

                APIBase.ClientCollection.SendMessage("eventbus:delete", JSSerializer.Serialize(new Dictionary<string, long>()
                {
                    { "ID", ID }
                }), null, ClientType.Skypad);


                //if(StartTime != null)
                //{
                //    string PersistDir = GetBlogDir();
                //    if (Directory.Exists(PersistDir))
                //    {
                //        Directory.Delete(PersistDir, true);
                //    }
                //}

            }

            internal void ImageCapture(bool Stealth)
            {
                if(PhotoMaxCount <= PhotoCount || PhotoSending)
                {
                    return;
                }

                if(!Started && Timer.ElapsedMilliseconds == 0)
                {
                    Start();
                }

                PhotoSending = true;
                PhotoCount++;
                Screen_Capture newCapture = new Screen_Capture(this, Stealth, (Status, Timecode, Response, ImageBase64, Image) => {

                    try
                    {
                        if (Status == System.Net.HttpStatusCode.OK)
                        {
                            Dictionary<string, dynamic> res = App.JSSerializer.Deserialize<Dictionary<string, dynamic>>(Response);

                            if (res.ContainsKey("filename"))
                            {
                                CoverPhoto = res["filename"];
                                
                                Thread ClipboardThread = new Thread(() =>
                                {
                                    Clipboard.SetText(CDNImagesHost + "/blogs/images/" + ((string)res["filename"]).Trim());
                                });
                                ClipboardThread.IsBackground = true;
                                ClipboardThread.SetApartmentState(ApartmentState.STA);
                                ClipboardThread.CurrentCulture = CultureInfo.CurrentCulture;
                                ClipboardThread.Start();
                                
                                AddEvent(new Event(this)
                                {
                                    Type = EventType.Photo,
                                    Timecode = (float)(Math.Round((double)Timer.ElapsedMilliseconds) + (PhotoCount / 1000.0f)),
                                    Params = new Dictionary<string, dynamic>()
                                    {
                                        { "URL", res["filename"] },
                                        { "Aircraft", Aircraft.Name },
                                        { "AircraftLivery", Aircraft.LastLivery },
                                        { "CameraMode", GetDescription(CameraMode) },
                                        { "Width", Image.Width },
                                        { "Height", Image.Width },
                                        { "Lon", Math.Round(LastTemporalData.PLANE_LOCATION.Lon, 6) },
                                        { "Lat", Math.Round(LastTemporalData.PLANE_LOCATION.Lat, 6) },
                                    }
                                }, false);

                                SendMetaUpdate();

                                //if (!Stealth)
                                //{
                                //    API.ClientCollection.SendMessage(App.JSSerializer.Serialize(new Dictionary<string, dynamic>()
                                //    {
                                //        {
                                //            "photo",
                                //            new Dictionary<string, dynamic>()
                                //            {
                                //                { "Base64", ImageBase64 },
                                //                { "Count", PhotoCount },
                                //            }
                                //        },
                                //    }), ClientType.Overlay, ClientMode.Local);
                                //}

                            }
                        }
                        else
                        {
                            PhotoCount--;
                            Console.WriteLine("Failed to send Screenshot: " + Status.ToString());
                        }
                    }
                    catch (Exception ex)
                    {
                        PhotoCount--;
                        Console.WriteLine("Failed to send Screenshot: " + ex.Message);
                    }

                    PhotoSending = false;

                });
            }

            internal void AddLiveDataToQueue()
            {
                if (Started && SimConnection.IsRunning && !IsPaused && !LastTemporalData.IS_SLEW_ACTIVE)
                {
                    if (SimHasFocus)
                    {
                        AddEvent(Messages.GetFPSMessage(this, Timer.ElapsedMilliseconds, LastTemporalData), false);
                    }
                }
            }

            internal void CheckQueue()
            {

                if (LastTransmission + 10000 < Timer.ElapsedMilliseconds)
                {
                    LastTransmission = Timer.ElapsedMilliseconds;
                    AddLiveDataToQueue();
                    BroadcastEvents();
                }
                else
                {
                    foreach (KeyValuePair<string, Event> ev in Queue)
                    {
                        if (Timer.ElapsedMilliseconds - ev.Value.Timecode > 10000)
                        {
                            BroadcastEvents();
                            break;
                        }
                    }
                }

            }

            internal void BroadcastEvents()
            {
                if (Queue.Count > 0)
                {
                    //Console.WriteLine("-----> Broadcasting Skyblog queue (" + Queue.Count + ")");
                    if (IsOnSatLink && LastTemporalData.PLANE_ALT_ABOVE_GROUND > 10000 && Started)
                    {
                        if (Timer.ElapsedMilliseconds - LastRemoteTransmission > 60000)
                        {
                            LastRemoteTransmission = Timer.ElapsedMilliseconds;
                        }
                        else
                        {
                            return;
                        }
                    }
                    else
                    {
                        LastRemoteTransmission = Timer.ElapsedMilliseconds;
                    }

                    lock (Queue)
                    {
                        APIBase.ClientCollection.SendMessage("eventbus:event", JSSerializer.Serialize(QueueToDictionary()), null, ClientType.Skypad);
                        LastTransmission = Timer.ElapsedMilliseconds;

                        Queue.Clear();
                    }
                }
            }

            internal void UpdateEvent(Event ev, bool broadcast)
            {
                lock (Events)
                {
                    int evIndex = Events.Count;
                    if(evIndex > 0 && EventDic[ev.Type].Count > 0)
                    {
                        while (ev.Type != Events[evIndex - 1].Type && evIndex > 1)
                        {
                            evIndex--;
                        }

                        //Console.WriteLine("----> Swapping Event " + ev.Type + " / " + JsonConvert.SerializeObject(ev.Params));

                        Events.Remove(EventDic[ev.Type][EventDic[ev.Type].Count - 1]);
                        Events.Add(ev);
                        EventDic[ev.Type][EventDic[ev.Type].Count - 1] = ev;

                        lock (Queue)
                        {
                            evIndex = Queue.Count;
                            if(evIndex > 0)
                            {
                                while (ev.Type != Queue[evIndex - 1].Value.Type && evIndex > 1)
                                {
                                    evIndex--;
                                }
                            }

                            string manip = "update_last";
                            int QueueIndex = Queue.Count;
                            while (QueueIndex > 0)
                            {
                                if(Queue[QueueIndex-1].Value.Type == ev.Type)
                                {
                                    manip = Queue[QueueIndex-1].Key;
                                    Queue.RemoveAt(QueueIndex-1);
                                }
                                QueueIndex--;
                            }

                            Queue.Add(new KeyValuePair<string, Event>(manip, ev));
                        }
                    }
                    else
                    {
                        AddEvent(ev, false);
                    }

                }

                if (broadcast)
                {
                    BroadcastEvents();
                }

            }

            internal void AddEvent(Event ev, bool broadcast)
            {
                //Console.WriteLine("----> Added Event " + ev.Type + " / " + JsonConvert.SerializeObject(ev.Params));

                lock (Events)
                {
                    Events.Add(ev);
                    EventDic[ev.Type].Add(ev);
                }

                switch (ev.Type)
                {
                    case EventType.Takeoff:
                        {
                            HasTakeoff = true;
                            SendMetaUpdate();
                            break;
                        }
                    case EventType.Landing:
                        {
                            HasLanding = true;
                            SendMetaUpdate();
                            break;
                        }
                }

                lock (Queue)
                {
                    Queue.Add(new KeyValuePair<string, Event>("add", ev));

                    if (broadcast)
                    {
                        BroadcastEvents();
                    }
                }

                OnEventBus(new BusEventArgs() { Ev = ev });
            }

            internal void DeleteEvent(Event ev)
            {
                if(ev != null)
                {
                    lock (Events)
                    {
                        Events.Remove(ev);

                        lock (EventDic)
                        {
                            EventDic[ev.Type].Remove(ev);
                        }
                    }

                    CoverPhoto = "";
                    SendMetaUpdate();
                }
            }

            internal void UpdateMeta(TemporalData td)
            {
                Time = DateTime.Now;
                TimeZulu = DateTime.UtcNow;
                SimTimeOffset = td.SIM_ZULU_OFFSET;
                SimTimeZulu = td.SIM_ZULU_TIME;
            }

            internal void SendMetaUpdate()
            {
                if(Aircraft != null)
                {
                    APIBase.ClientCollection.SendMessage("eventbus:meta", JSSerializer.Serialize(ToSummarized()), null, ClientType.Skypad);
                }
            }

            internal Event GetEvent(float Timecode)
            {
                var test = Active;
                return Events.Find(x => x.Timecode == Timecode);
            }

            internal Event GetLastEvent(EventType type)
            {
                lock (Events)
                {
                    int evIndex = Events.Count - 1;
                    while (type != Events[evIndex].Type && evIndex >= 0)
                    {
                        evIndex--;
                    }

                    return Events[evIndex];
                }
            }
            
            internal void ExportPersistence()
            {
                /*
                if(StartTime != null)
                {
                    lock (Lock)
                    {
                        try
                        {
                            string PersistDir = GetBlogDir();
                            string PersistPath = Path.Combine(PersistDir, ID.ToString() + ".dat");
                            
                            Console.WriteLine("Exporting Blog Persistence " + ID.ToString());

                            if (!Directory.Exists(PersistDir))
                            {
                                Directory.CreateDirectory(PersistDir);
                            }

                            if (File.Exists(PersistPath + "_bkp"))
                            {
                                File.Delete(PersistPath + "_bkp");
                            }

                            if (File.Exists(PersistPath))
                            {
                                File.Copy(PersistPath, PersistPath + "_bkp");
                            }

                            using (StreamWriter writer = new StreamWriter(PersistPath, false))
                            {
                                writer.WriteLine(JSSerializer.Serialize(ToPersisted()));
                            }

                            File.Delete(PersistPath + "_bkp");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine("Failed to save Blog Persistence: " + ID.ToString() + " " + ex.Message + Environment.NewLine + ex.StackTrace);
                        }
                    }

                    Console.WriteLine("Done Exporting Blog Persistence");
                }
                */

            }

            internal Dictionary<string, dynamic> ToPersisted()
            {
                Dictionary<string, dynamic> rn = new Dictionary<string, dynamic>()
                {
                    { "Aircraft", new Dictionary<string, dynamic>()
                        {
                            { "Name", Aircraft.Name },
                            { "Manufacturer", Aircraft.Manufacturer },
                            { "Model", Aircraft.Model },
                        }
                    },
                    { "Sim", Sim.Platform },
                    { "VMajor", VMajor },
                    { "VMinor", VMinor },
                    { "ID", ID },
                    { "StartTime", StartTime != null ? ((DateTime)StartTime).ToString("O") : null },
                    { "CoverPhoto", CoverPhoto },
                    { "PhotoCount", PhotoCount },
                    { "HasLanding", HasLanding },
                    { "HasTakeoff", HasTakeoff },
                    { "Time", Time.ToString("O") },
                    { "TimeZulu", TimeZulu.ToString("O") },
                    { "Timer", Timer.ElapsedMilliseconds },
                    { "AirTime", AirTime.ElapsedMilliseconds },
                    { "BlockTime", BlockTime.ElapsedMilliseconds },
                    { "SimTimeOffset", SimTimeOffset },
                    { "SimTimeZulu", SimTimeZulu.ToString("O") },
                    { "Airports", new List<string>() },
                    { "TravelDistance", TravelDistance },
                    { "Events", new List<Dictionary<string, dynamic>>() },
                };

                lock (Airports)
                {
                    foreach (Airport Airport in Airports)
                    {
                        rn["Airports"].Add(Airport.ICAO);
                    }
                }

                lock (Events)
                {
                    foreach (var Ev in Events)
                    {
                        rn["Events"].Add(Ev.ToDictionary());
                    }
                }

                return rn;
            }

            internal Dictionary<string, dynamic> ToSummarized()
            {
                string AirportsStr = "";
                int i = 0;
                lock(Airports)
                {
                    foreach (Airport apt in Airports)
                    {
                        AirportsStr += apt.ICAO + ", ";
                        i++;
                    }
                }
                
                lock(TemporalBuffer10s)
                {
                    

                    Dictionary<string, dynamic> rt = new Dictionary<string, dynamic>()
                    {
                        { "ID", ID },
                        { "Aircraft", new Dictionary<string, dynamic>()
                            {
                                { "Name", Aircraft.Name },
                                { "Manufacturer", Aircraft.Manufacturer },
                                { "Model", Aircraft.Model },
                            }
                        },
                        { "Started", Started },
                        { "Live", IsLoaded },
                        { "IsValid", IsValid },
                        { "Platform", SimList.IndexOf(Sim) },
                        { "VMajor", VMajor },
                        { "VMinor", VMinor },
                        { "CoverPhoto", CoverPhoto },
                        { "PhotoCount", PhotoCount },
                        { "Airports", AirportsStr.TrimEnd(' ').TrimEnd(',') },
                        { "AirTime", Math.Round((double)AirTime.ElapsedMilliseconds / 1000) },
                        { "BlockTime", Math.Round((double)BlockTime.ElapsedMilliseconds / 1000) },
                        { "DistanceTraveled", Math.Round(TravelDistance) },
                        { "Time", Time.ToString("O") },
                        { "TimeZulu", TimeZulu.ToString("O") },
                        { "SimTimeOffset", SimTimeOffset },
                        { "SimTimeZulu", SimTimeZulu.ToString("O") },

                        { "Lon", Math.Round(LastTemporalData.PLANE_LOCATION.Lon, 6) },
                        { "Lat", Math.Round(LastTemporalData.PLANE_LOCATION.Lat, 6) },
                        { "Alt", Math.Round(LastTemporalData.PLANE_ALTITUDE) },
                        { "GAlt", Math.Round(LastTemporalData.PLANE_ALT_ABOVE_GROUND) },
                        { "HDG", Math.Round(Utils.Normalize360(LastTemporalData.PLANE_HEADING_DEGREES), 3) },
                        { "GS", Math.Round(LastTemporalData.SURFACE_RELATIVE_GROUND_SPEED) },
                        { "CRS", Math.Round(LastTemporalData.PLANE_COURSE, 3) },
                        { "MagVar", Math.Round(LastTemporalData.PLANE_MAGVAR) },
                        { "TurnRate", LastTemporalData.PLANE_TURNRATE },
                        { "FPM", TemporalBuffer3s.Count > 3 ? Math.Round(TemporalBuffer3s.Select(x => x.VERTICAL_SPEED).Average()) : 0 },

                        { "Terrain", Compute_TerrainAvoidance.GetList() },

                        { "PayloadTotal", LastTemporalData.TOTAL_WEIGHT },
                        { "PayloadStations", Aircraft.PayloadStations != null ? Aircraft.PayloadStations.Select(x => x.ToDictionary()) : null }
                    };

                    return rt;
                }
            }

            internal List<Dictionary<string, dynamic>> ToListing(long FromTC)
            {
                List<Dictionary<string, dynamic>> rt = new List<Dictionary<string, dynamic>>();
                int i = 0;
                while (i < Events.Count)
                {
                    if(ID + Events[i].Timecode > FromTC)
                    {
                        rt.Add(Events[i].ToDictionary("add"));
                    }
                    i++;
                }
                return rt;
            }

            internal List<Dictionary<string, dynamic>> ToDictionary()
            {
                List<Dictionary<string, dynamic>> rt = new List<Dictionary<string, dynamic>>();
                lock (Events)
                {
                    foreach (var Ev in Events)
                    {
                        rt.Add(Ev.ToDictionary("add"));
                    }
                }
                return rt;
            }

            internal List<Dictionary<string, dynamic>> QueueToDictionary()
            {
                List<Dictionary<string, dynamic>> rt = new List<Dictionary<string, dynamic>>();
                lock (Queue)
                {
                    foreach (var Ev in Queue)
                    {
                        rt.Add(Ev.Value.ToDictionary(Ev.Key));
                    }
                }
                return rt;
            }
            
        }

        internal enum EventType
        {
            [EnumValue("None")]
            None,
            [EnumValue("Start")]
            Start,
            [EnumValue("Close")]
            Close,
            [EnumValue("Engines")]
            Engines,
            [EnumValue("Position")]
            Position,
            [EnumValue("Autopilot")]
            Autopilot,
            [EnumValue("AircraftChange")] // TODO
            AircraftChange,
            [EnumValue("AircraftCrash")] // TODO
            AircraftCrash,
            [EnumValue("SimCrash")]
            SimCrash,
            [EnumValue("Taxi")]
            Taxi,
            [EnumValue("Landing")]
            Landing,
            [EnumValue("Takeoff")]
            Takeoff,
            [EnumValue("Weather")]
            Weather,
            [EnumValue("Fuel")]
            Fuel,
            [EnumValue("Photo")]
            Photo,
            [EnumValue("Payload")]
            Payload,
            [EnumValue("CruiseChange")]
            CruiseChange,
            [EnumValue("Slew")]
            Slew,
            [EnumValue("FPS")]
            FPS,
        }

        internal class Event
        {
            internal EventsSession Blog = null;
            internal double Timecode = 0;
            internal EventType Type = EventType.None;
            internal Dictionary<string, dynamic> Params = null;
            internal TemporalData TemporalRef = null;

            internal Event(EventsSession _bl)
            {
                Blog = _bl;
            }

            internal Event(EventsSession _bl, Dictionary<string, dynamic> Persisted)
            {
                Blog = _bl;
                Timecode = (double)Persisted["Timecode"];
                Type = (EventType)GetEnum(typeof(EventType), (string)Persisted["Type"]);
                Params = (Dictionary<string, dynamic>)Persisted["Params"];
            }

            internal Dictionary<string, dynamic> ToDictionary(string ev = null)
            {
                Dictionary<string, dynamic> rt = new Dictionary<string, dynamic>()
                {
                    { "ID", Blog.ID },
                    { "Timecode", Timecode },
                    { "Type", GetDescription(Type) },
                    { "Params", Params },
                };

                if(ev != null)
                {
                    rt.Add("Manipulation", ev);
                }
                return rt;
            }
        }
        
    }
}
